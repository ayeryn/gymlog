import calendar
import os
import plot_report

# Global vars
classes = set()
tally = {}
total = 0


def process_jnl(report):
    """Return a dict of class:attendance

    Read monthly workout journal to dictionary
    """

    d = {}
    with open(report, 'r') as f:
        for line in f:
            temp = line.split(',')
            d[temp[0]] = temp[1].title()
    return d


# Construct tally str corresponding to calendar per line
def insert_class(s, day, is_class=False):
    """ Return a string

    For a string consisting of dates in a week, and what day to process
    among those days, construct new attendance string

    TO DO: this could be better?
    """

    # Pad single-digit days
    if len(day) < 2:
        day = ' ' + day

    # Construct attendance string based on dates
    # Slice up to ind and insert attendance
    ind = s.find(day)
    ret = s[:ind]

    if is_class:
        ret += ' x'
    else:
        ret += '  '
    ret += s[ind+2:]

    return ret


def generate_report(report, cal):
    """ Return a string of complete monthly attendance report in
    calendar view.

    Given report dictionary and monthly view generated by calendar,
    construct the report string for display


    Finally view:
    Calendar output with attendance marked underneath each day

    TODO: could be better???
    """
    global total, classes, tally

    weeks = cal.split('\n')

    # Get month and weekday lines in cal
    rep = weeks[0] + '\n'
    rep += weeks[1] + '\n'

    # Process weeks starting next line
    for i in range(2, len(weeks)):

        days_str = weeks[i]
        days = days_str.split()

        rep += days_str + '\n'

        # Process days
        for d in days:

            # rep += days_str
            if d in report:
                total += 1
                days_str = insert_class(days_str, d, 1)

                # Add to class tally
                class_name = report[d]
                classes.add(class_name)
                if class_name in tally:
                    tally[class_name] += 1
                else:
                    tally[class_name] = 1
            else:
                days_str = insert_class(days_str, d)

        # Add attendance for week and
        rep += days_str
        rep += '\n'
    return rep


def sort_classes_by_attendance():
    """ Return a dict

    sort tally dictionary by attendance number in descending order
    """

    return dict(sorted(
        tally.items(), key=lambda x: x[1], reverse=True))


def print_report(rep):
    """ Print the report!!

    Final output includes:
    TODO: - Title
    - Attendance in calendar view
    - Total classes taken
    - Classes taken sorted by attendance
    """

    # print calendar view
    print(rep)

    # Print class details
    print('Total classes taken: ' + str(total))

    msg = '\n'
    msg += '==== Classes taken (sorted) ====\n'
    for k, v in sort_classes_by_attendance().items():
        msg += 'Class: {:>15}, taken {:>2} times\n'.format(k.rstrip(), v)
    print(msg)


def plot_report(month, year):
    """ Graph view menu

    Ask for user-input on which graph to plot
    """
    mode = input('Which graph would you like to generate?\n')

    if 'b' in mode.lower():
        plot_report.plot_bar(tally, month, year)
    # elif 'p' in mode.lower():
    #     plot_report.plot_pie(tally, month, year)


def main():
    # report_name = input('Which report would you like to generate?\n')
    report_name = '202212'

    year = report_name[: 4]
    month = report_name[4:]
    cal = calendar.month(int(year), int(month))

    report_name = os.getcwd() + '/' + report_name + '.csv'
    report = process_jnl(report_name)

    report_str = generate_report(report, cal)
    print_report(report_str)

    # plot_report(month, year)


main()
