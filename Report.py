import calendar
import os


class Report:

    def __init__(self, month, year):
        self.month = month
        self.year = year
        self.cal = calendar.month(int(self.year), int(self.month)).rstrip()
        self.name = os.getcwd() + '/' + self.year + self.month + '.csv'
        self.title = 'Monthly Report {}/{}'.format(self.year, self.month)

        # Initialize attrs
        self.attendance = {}
        self.classes = set()
        self.class_tally = {}
        self.report_str = ''
        self.total_classes = 0
        self.num_of_weeks = 0

    def process_jnl(self):
        """Set self.attendance: a dict of date:class
        """
        with open(self.name, 'r') as f:
            for line in f:
                temp = line.split(',')
                self.attendance[temp[0]] = temp[1].title()

    def print_attendance(self):
        for k, v in self.attendance.items():
            print('{:>2}: {}'.format(k, v))

    def __insert_class(self, s, day, is_class=False):
        """ Return a string

        For a string consisting of dates in a week, and what day to process
        among those days, construct new attendance string

        TO DO: this could be better?
        """

        # Pad single-digit days
        if len(day) < 2:
            day = ' ' + day

        # Construct attendance string based on dates
        # Slice up to ind and insert attendance
        ind = s.find(day)
        ret = s[:ind]

        if is_class:
            ret += ' x'
        else:
            ret += '  '
        ret += s[ind+2:]

        return ret

    def generate_report(self):
        """ Set self.report_str: string of complete monthly
        attendance report in calendar view.

        Given self.attendance and monthly view generated by calendar,
        construct the report string for display

        TODO: could be better???
        """

        weeks = self.cal.split('\n')
        self.num_of_weeks = len(weeks) - 2

        # Get month and weekday lines in cal
        self.report_str = weeks[0] + '\n'
        self.report_str += weeks[1] + '\n'

        # Process weeks starting next line
        for i in range(2, len(weeks)):

            days_str = weeks[i]
            days = days_str.split()

            self.report_str += days_str + '\n'

            # Process days
            for d in days:

                # rep += days_str
                if d in self.attendance:
                    self.total_classes += 1
                    days_str = self.__insert_class(days_str, d, 1)

                    # Add to class tally
                    class_name = self.attendance[d]
                    self.classes.add(class_name)
                    if class_name in self.class_tally:
                        self.class_tally[class_name] += 1
                    else:
                        self.class_tally[class_name] = 1
                else:
                    days_str = self.__insert_class(days_str, d)

            # Add attendance for week and
            self.report_str += days_str
            self.report_str += '\n'

        self.class_tally = dict(
            sorted(self.class_tally.items(), key=lambda x: x[1], reverse=True))

    def print_report(self):
        """ Print the report!!

        Final output includes:
        - Attendance in calendar view
        - Total classes taken
        - Average class per week
        - Classes taken sorted by attendance
        """

        # Calendar view
        print(self.report_str)

        # Total class
        print('Total classes taken: ' + str(self.total_classes))

        # Avg. class per week
        avg = self.total_classes // self.num_of_weeks
        print('Average classes per week: ' + str(avg))

        # Classes details sorted
        msg = '\n'
        msg += '==== Classes taken (sorted) ====\n'
        for k, v in self.class_tally.items():
            msg += 'Class: {:>15}, taken{:>2} times\n'.format(k.rstrip(), v)
        print(msg)
